{'body': 'Hi\r\n\r\nYou need to fill out the ImageDescription before creating the =\r\ndecompression session, using eg GetMediaSampleDescription.\r\n\r\nThere is documentation and a couple of ICMDecompressionSession samples =\r\nin Xcode.\r\n\r\nBest of luck - T\r\n\r\nOn 1 May 2010, at 02:42, Bo Peng wrote:\r\n\r\n> Hi All,\r\n>=20\r\n> I forgot to tell you guys the error code. The returned value of\r\n> ICMDecompressionSessionDecodeFrame() function call is always -50,\r\n> which means error in user parameter list.\r\n>=20\r\n> I am stuck in the quicktime API ICMDecompressionSessionDecodeFrame()\r\n> for a while, and I could not find any other resources or any other\r\n> sample code. Could any body help me out, and any suggestions\r\n> appreciated.\r\n>=20\r\n> I want to import a movie file from local drive, get the compressed\r\n> video frames, decode them, and encapsulate them into our own\r\n> UncVideoUnit format.\r\n> Right now we have already got the compressed video frames, but when we\r\n> are trying to decode them, we have got some problem. Here is our\r\n> source code, could any body tell me if there is something wrong in our\r\n> code.\r\n>=20\r\n>=20\r\n> // initialize callback structure\r\n> ICMDecompressionTrackingCallbackRecord callRecord;\r\n> callRecord.decompressionTrackingCallback =3D WriteFrameToBitmap;\r\n> callRecord.decompressionTrackingRefCon =3D NULL;\r\n>=20\r\n> // add attributes for pixel buffer that comes out\r\n> CFMutableDictionaryRef pixelBufferAttributes =3D NULL;\r\n> pixelBufferAttributes =3D CFDictionaryCreateMutable( NULL, 0,\r\n> &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks );\r\n>=20\r\n> OSType format =3D k24RGBPixelFormat;\r\n> CFNumberRef pFormat =3D CFNumberCreate( NULL, kCFNumberSInt32Type, =\r\n&format );\r\n> CFDictionaryAddValue( pixelBufferAttributes,\r\n> kCVPixelBufferPixelFormatTypeKey, pFormat );\r\n> CFRelease( pFormat );\r\n>=20\r\n> int width =3D 1280;\r\n> CFNumberRef pWidth =3D CFNumberCreate( NULL, kCFNumberIntType, &width =\r\n);\r\n> CFDictionaryAddValue( pixelBufferAttributes, kCVPixelBufferWidthKey, =\r\npWidth );\r\n> CFRelease( pWidth );\r\n>=20\r\n> int height =3D 720;\r\n> CFNumberRef pHeight =3D CFNumberCreate( NULL, kCFNumberIntType, =\r\n&height );\r\n> CFDictionaryAddValue( pixelBufferAttributes, kCVPixelBufferHeightKey, =\r\npHeight );\r\n> CFRelease( pHeight );\r\n>=20\r\n> //  set up decompression session\r\n> ICMDecompressionSessionRef decompressionSession;\r\n> ImageDescriptionHandle description =3D\r\n> (ImageDescriptionHandle)NewHandleClear(sizeof(ImageDescription));\r\n> OSStatus nStatus =3D ICMDecompressionSessionCreate ( NULL, =\r\ndescription,\r\n> NULL, pixelBufferAttributes, &callRecord, &decompressionSession);\r\n> CFRelease( pixelBufferAttributes );\r\n>=20\r\n>=20\r\n> // get video frames from movie files and decode each frame\r\n> TimeValue64 startTime\r\n> =3DGetMediaAdvanceDecodeTime(GetTrackMedia(track));     // for =\r\nstarting\r\n> time of each frame\r\n> TimeValue64 DurationPerSample =3D 0;               // fro duration of =\r\neach frame\r\n> int count =3D 0;\r\n> while(true)\r\n> {\r\n>       ByteCount size =3D 0;\r\n>       UInt8 *aData =3D new unsigned char[maxDataSize];\r\n>       nErr =3D GetMediaSample2(videoMedia, aData, maxDataSize, &size,\r\n> startTime, nil, &DurationPerSample, nil, nil, nil, 1, nil, nil);\r\n>=20\r\n>       OSStatus nStatus =3D ICMDecompressionSessionDecodeFrame(\r\n> decompressionSession, (const UInt8*)aData, size, NULL, NULL, (void\r\n> *)&count );\r\n>=20\r\n>       count++;\r\n>       startTime +=3D DurationPerSample;\r\n>=20\r\n>       if(nErr !=3D noErr)\r\n>            break;\r\n>=20\r\n>        delete [] aData;}\r\n> }\r\n>=20\r\n>=20\r\n> Here is the definition for the callback funtion:\r\n>=20\r\n> static void WriteFrameToBitmap(\r\n>                       void *decompressionTrackingRefCon,\r\n>                       OSStatus result,\r\n>                       ICMDecompressionTrackingFlags =\r\ndecompressionTrackingFlags,\r\n>                       CVPixelBufferRef pixelBuffer,\r\n>                       TimeValue64 displayTime,\r\n>                       TimeValue64 displayDuration,\r\n>                       ICMValidTimeFlags validTimeFlags,\r\n>                       void *reserved,\r\n>                       void *sourceFrameRefCon )\r\n> {\r\n>       // when we get decoded frame, print it out to bitmap\r\n>       if ( (result =3D=3D noErr) && (decompressionTrackingFlags &\r\n> kICMDecompressionTracking_EmittingFrame) && pixelBuffer )\r\n>       {\r\n>               char num[16];\r\n>               sprintf_s(num, 16, "%d", *((int *)sourceFrameRefCon));\r\n>               std::string strFilePath =3D std::string("Bitmap0") +\r\n> std::string(num);\r\n>=20\r\n>               boost::shared_ptr<StillImage> pMyImage =3D\r\n> StillImage::CreateInstance();\r\n>               size_t size =3D CVPixelBufferGetDataSize(pixelBuffer);\r\n>               BYTE *mem_buffer =3D (BYTE*)malloc(size * sizeof(BYTE));\r\n>               strcpy((char*)mem_buffer, (char\r\n> *)CVPixelBufferGetBaseAddress(pixelBuffer));\r\n>               pMyImage->LoadImage(mem_buffer, size);\r\n>               pMyImage->SaveImage(strFilePath.c_str(), BMP);\r\n>       }\r\n>=20\r\n>=20\r\n> }\r\n>=20\r\n>=20\r\n> Thanks very much.\r\n>=20\r\n> Bo Peng\r\n> Software Engineer\r\n> Capella Systems, LLC\r\n> _______________________________________________\r\n> Do not post admin requests to the list. They will be ignored.\r\n> QuickTime-API mailing list      (QuickTime-API@lists.apple.com)\r\n> Help/Unsubscribe/Update your Subscription:\r\n> =\r\nhttp://lists.apple.com/mailman/options/quicktime-api/bangnoise%40csmining.org=\r\n\r\n>=20\r\n> This email sent to bangnoise@csmining.org\r\n\r\n _______________________________________________\r\nDo not post admin requests to the list. They will be ignored.\r\nQuickTime-API mailing list      (QuickTime-API@lists.apple.com)\r\nHelp/Unsubscribe/Update your Subscription:\r\nhttp://lists.apple.com/mailman/options/quicktime-api/mlsubscriber.tech%40csmining.org\r\n\r\nThis email sent to mlsubscriber.tech@csmining.org\r\n\r\n', 'subject': 'Re: ICMDecompressionSessionDecodeFrame() is not working'}