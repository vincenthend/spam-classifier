{'body': 'Hi\n\nYou need to fill out the ImageDescription before creating the decompression session, using eg GetMediaSampleDescription.\n\nThere is documentation and a couple of ICMDecompressionSession samples in Xcode.\n\nBest of luck - T\n\nOn 1 May 2010, at 02:42, Bo Peng wrote:\n\n> Hi All,\n> \n> I forgot to tell you guys the error code. The returned value of\n> ICMDecompressionSessionDecodeFrame() function call is always -50,\n> which means error in user parameter list.\n> \n> I am stuck in the quicktime API ICMDecompressionSessionDecodeFrame()\n> for a while, and I could not find any other resources or any other\n> sample code. Could any body help me out, and any suggestions\n> appreciated.\n> \n> I want to import a movie file from local drive, get the compressed\n> video frames, decode them, and encapsulate them into our own\n> UncVideoUnit format.\n> Right now we have already got the compressed video frames, but when we\n> are trying to decode them, we have got some problem. Here is our\n> source code, could any body tell me if there is something wrong in our\n> code.\n> \n> \n> // initialize callback structure\n> ICMDecompressionTrackingCallbackRecord callRecord;\n> callRecord.decompressionTrackingCallback = WriteFrameToBitmap;\n> callRecord.decompressionTrackingRefCon = NULL;\n> \n> // add attributes for pixel buffer that comes out\n> CFMutableDictionaryRef pixelBufferAttributes = NULL;\n> pixelBufferAttributes = CFDictionaryCreateMutable( NULL, 0,\n> &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks );\n> \n> OSType format = k24RGBPixelFormat;\n> CFNumberRef pFormat = CFNumberCreate( NULL, kCFNumberSInt32Type, &format );\n> CFDictionaryAddValue( pixelBufferAttributes,\n> kCVPixelBufferPixelFormatTypeKey, pFormat );\n> CFRelease( pFormat );\n> \n> int width = 1280;\n> CFNumberRef pWidth = CFNumberCreate( NULL, kCFNumberIntType, &width );\n> CFDictionaryAddValue( pixelBufferAttributes, kCVPixelBufferWidthKey, pWidth );\n> CFRelease( pWidth );\n> \n> int height = 720;\n> CFNumberRef pHeight = CFNumberCreate( NULL, kCFNumberIntType, &height );\n> CFDictionaryAddValue( pixelBufferAttributes, kCVPixelBufferHeightKey, pHeight );\n> CFRelease( pHeight );\n> \n> //  set up decompression session\n> ICMDecompressionSessionRef decompressionSession;\n> ImageDescriptionHandle description =\n> (ImageDescriptionHandle)NewHandleClear(sizeof(ImageDescription));\n> OSStatus nStatus = ICMDecompressionSessionCreate ( NULL, description,\n> NULL, pixelBufferAttributes, &callRecord, &decompressionSession);\n> CFRelease( pixelBufferAttributes );\n> \n> \n> // get video frames from movie files and decode each frame\n> TimeValue64 startTime\n> =GetMediaAdvanceDecodeTime(GetTrackMedia(track));     // for starting\n> time of each frame\n> TimeValue64 DurationPerSample = 0;               // fro duration of each frame\n> int count = 0;\n> while(true)\n> {\n>       ByteCount size = 0;\n>       UInt8 *aData = new unsigned char[maxDataSize];\n>       nErr = GetMediaSample2(videoMedia, aData, maxDataSize, &size,\n> startTime, nil, &DurationPerSample, nil, nil, nil, 1, nil, nil);\n> \n>       OSStatus nStatus = ICMDecompressionSessionDecodeFrame(\n> decompressionSession, (const UInt8*)aData, size, NULL, NULL, (void\n> *)&count );\n> \n>       count++;\n>       startTime += DurationPerSample;\n> \n>       if(nErr != noErr)\n>            break;\n> \n>        delete [] aData;}\n> }\n> \n> \n> Here is the definition for the callback funtion:\n> \n> static void WriteFrameToBitmap(\n>                       void *decompressionTrackingRefCon,\n>                       OSStatus result,\n>                       ICMDecompressionTrackingFlags decompressionTrackingFlags,\n>                       CVPixelBufferRef pixelBuffer,\n>                       TimeValue64 displayTime,\n>                       TimeValue64 displayDuration,\n>                       ICMValidTimeFlags validTimeFlags,\n>                       void *reserved,\n>                       void *sourceFrameRefCon )\n> {\n>       // when we get decoded frame, print it out to bitmap\n>       if ( (result == noErr) && (decompressionTrackingFlags &\n> kICMDecompressionTracking_EmittingFrame) && pixelBuffer )\n>       {\n>               char num[16];\n>               sprintf_s(num, 16, "%d", *((int *)sourceFrameRefCon));\n>               std::string strFilePath = std::string("Bitmap0") +\n> std::string(num);\n> \n>               boost::shared_ptr<StillImage> pMyImage =\n> StillImage::CreateInstance();\n>               size_t size = CVPixelBufferGetDataSize(pixelBuffer);\n>               BYTE *mem_buffer = (BYTE*)malloc(size * sizeof(BYTE));\n>               strcpy((char*)mem_buffer, (char\n> *)CVPixelBufferGetBaseAddress(pixelBuffer));\n>               pMyImage->LoadImage(mem_buffer, size);\n>               pMyImage->SaveImage(strFilePath.c_str(), BMP);\n>       }\n> \n> \n> }\n> \n> \n> Thanks very much.\n> \n> Bo Peng\n> Software Engineer\n> Capella Systems, LLC\n> _______________________________________________\n> Do not post admin requests to the list. They will be ignored.\n> QuickTime-API mailing list      (QuickTime-API@lists.apple.com)\n> Help/Unsubscribe/Update your Subscription:\n> http://lists.apple.com/mailman/options/quicktime-api/bangnoise%40csmining.org\n> \n> This email sent to bangnoise@csmining.org\n\n _______________________________________________\nDo not post admin requests to the list. They will be ignored.\nQuickTime-API mailing list      (QuickTime-API@lists.apple.com)\nHelp/Unsubscribe/Update your Subscription:\nhttp://lists.apple.com/mailman/options/quicktime-api/mlsubscriber.tech%40csmining.org\n\nThis email sent to mlsubscriber.tech@csmining.org\n\n', 'subject': 'Re: ICMDecompressionSessionDecodeFrame() is not working'}