{'body': 'On Fri, May 21, 2010 at 1:44 AM, John Engelhart\r\n<john.engelhart@csmining.org> wrote:\r\n> On Thu, May 20, 2010 at 3:23 PM, Quincey Morris\r\n> <quinceymorris@earthlink.net> wrote:\r\n>>\r\n>> On May 20, 2010, at 11:50, Greg Parker wrote:\r\n>>\r\n>> > "The Objective-C Programming Language" includes a section that documen=\r\nts\r\n>> > the well-defined nil return types. Other documentation should point ba=\r\nck to\r\n>> > that.\r\n>>\r\n>> Interestingly, the section you refer to includes the following statement=\r\n:\r\n>>\r\n>> > "If the method returns any pointer type, any integer scalar of size le=\r\nss\r\n>> > than or equal to sizeof(void*), a float, a double, a long double, or a=\r\n long\r\n>> > long, then a message sent to nil returns 0."\r\n>>\r\n>> This makes me wonder what the answer is for an integer scalar of size\r\n>> *greater* than sizeof(void*) that isn\'t a long long.\r\n>\r\n> 6.3.1.1 Arithmetic operands\r\n> 1) The rank of long long int shall be greater than the rank of long int,\r\n> which shall be greater than the rank of int, which shall be greater than =\r\nthe\r\n> rank of short int, which shall be greater than the rank of signed char.\r\n> The fact that the documentation explicitly calls out "long long" means th=\r\nat\r\n> the statement "any integer scalar of size less than or equal to\r\n> sizeof(void*)" is redundant because the "long long" type is, by definitio=\r\nn,\r\n> the largest of the "standard integer types".\r\n\r\nThere is no guarantee that (void*) is the same size as *any* of the\r\nstandard integer types.\r\n\r\n>\r\n>>\r\n>> For example, if the architecture has sizeof(long) > sizeof(void*), the\r\n>> above definition would rule out long, but rule in long long. Odd.\r\n>\r\n> Nope. =C2=A0By definition, long is a subset of long long-\r\n> 6.2.5 Types\r\n> 8) For any two integer types with the same signedness and different integ=\r\ner\r\n> conversion rank (see 6.3.1.1), the range of values of the type with small=\r\ner\r\n> integer conversion rank is a subrange of the values of the other type.\r\n\r\nThat, in no way, means that (long) cannot be larger than (void*). That\r\nsaid, I do believe that the intent is that all of the standard integer\r\ntypes can be assumed to be zero when returned from a message sent to\r\nnil, even if the wording leaves the potential for a gap on unusual\r\narchitectures (such as where long is larger than void*).\r\n\r\n\r\n--=20\r\nClark S. Cox III\r\nclarkcox3@csmining.org\r\n _______________________________________________\r\nDo not post admin requests to the list. They will be ignored.\r\nObjc-language mailing list      (Objc-language@lists.apple.com)\r\nHelp/Unsubscribe/Update your Subscription:\r\nhttp://lists.apple.com/mailman/options/objc-language/mlsubscriber.tech%40csmining.org\r\n\r\nThis email sent to mlsubscriber.tech@csmining.org\r\n\r\n', 'subject': 'Re: Nil messaging statement in "Cocoa Fundimentals Guide"\r\n\tmisleading?'}