{'body': 'Hi XFS developers,\nWhen studying xfs code(2.4.19), I found that the inode will be locked by \nXFS_ILOCK_SHARE flags before we get acl, which may cause deadlock.\nBecause when getting acl, it will allocate memory in KM_SLEEP, If the \nmemory is tight, the process will call xfs_strategy, and may \nlock(XFS_ILOCK_SHARE)the same inode again. If between these two locks, \nanother process try to lock the inode by XFS_ILOCK_EXCL, these two \nprocesses  will be deadlock. As follows,\n\n    A process get ea                         B process want lock ipA\n\n1) xfs_ilock(ipA, XFS_ILOCK_SHARE)             .....................\n            |                                         |\n            |                                         |\n         get acl                        2) xfs_ilock(ipA, XFS_ILOCK_EXCL)\n            |                                         |\n            |                                         |\n        memory tight\n            |\n            |\n        xfs_stragegy\n            |\n            |\n3)xfs_ilock(ipA, XFS_ILOCK_SHARE)        ............................\n\n  these two processes will be dead lock.\n\nSo I believe that acl allocation GFP_MASKshould be changed to KM_NOFS.\nright?\n\nbest regards\n                                                 wdd\n\n\n\n\n', 'subject': 'a deadlock problem'}