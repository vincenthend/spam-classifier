{'body': "> Oops, I tend to feel like that most times! I tend to feel that if we\n> have extremely good compilation tools, then those tools should be able\n> to do the inlining and optimisation far better than I could. That's the\n> theory anyway :) And there's always a tradeoff with inlining between\n> speed and memory bloat (which may sometimes be no tradeoff if swap\n> starts getting involved...)\n\nYes and I understand that argument, however.\nSometimes I find that if I don't try to write code in the least space\npossible or for example become lazy and say\n\n--Bad style\nBool q;\n\nIf(q)\n\tWhen I should say\nIf(q==true)\n\t\nOr\n\n--Bad optimization\n\nint a;\na=some_function();\nif(a) <--which apparently works but is 'bad coding style'.\n\nThat's what I mean about letting the programming tools take care\nof the coding.... it's considered 'bad' apparently.\n\nOr for example say you are writing a loop that says\n\nFor(a=0;a<strlen(somestring);a++)\n{\n some_thing_goes_here();\n\n if(b=strlen(somestring)-4)\n\tdo_something;\n\n};\n\nwhen I probably should say\n\nc=strlen(somestring);\n\nFor(a=0;a<c;a++)\n{\n some_thing_goes_here();\n\n if(b=c)\n\tdo_something;\n\n};\n\nOf course 'people' always say that the extra call to strlen() will make no\ndifference on the machines we have 'these days'.\n\nBut my machine has 256mb of ram.... not 640k.\n\n<<Maybe I'm just ranting though>>\n\n-- \nIrish Linux Users' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n\n", 'subject': 'RE: [ILUG] slashdot EW Dijkstra humor'}