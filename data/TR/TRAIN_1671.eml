{'body': "On Sun, May 23, 2010 at 7:34 PM, John Engelhart\r\n<john.engelhart@csmining.org> wrote:\r\n> If you believe otherwise, show your work. =C2=A0Otherwise, the point is s=\r\nettled.\r\n\r\nFact: the C standard does not say anything about machine-level calling\r\nconventions.\r\n\r\nFact: the C standard does not address the behavior which results when\r\nthe call site of a function sees a prototype whose return type differs\r\nfrom the return type present at the definition of the function.\r\n\r\nConclusion: a conforming C compiler could use completely different\r\ntechniques for returning 'int' and 'long'.\r\n\r\nConclusion: in such an ABI, machine-level code which arranges for\r\ncallers to see an 'int' return value of 0 could easily be written such\r\nthat a caller which expects 'long' to see something other than zero.\r\n\r\nConclusion: if you're paranoid about portability, you can't assume\r\nthat messages to nil with a 'long' return type will return 0, with a\r\nstrict reading of Apple's guarantees.\r\n\r\nAnd note that absolutely nothing in the above is even slightly related\r\nto integer type sizes, type conversions, casts, promotions, the\r\nbit-level representation of the NULL pointer, or any other such\r\nthings, so any discussion of them in this context is utterly\r\npointless.\r\n\r\nMike\r\n _______________________________________________\r\nDo not post admin requests to the list. They will be ignored.\r\nObjc-language mailing list      (Objc-language@lists.apple.com)\r\nHelp/Unsubscribe/Update your Subscription:\r\nhttp://lists.apple.com/mailman/options/objc-language/mlsubscriber.tech%40csmining.org\r\n\r\nThis email sent to mlsubscriber.tech@csmining.org\r\n\r\n", 'subject': 'Re: Nil messaging statement in "Cocoa Fundimentals Guide"\r\n\tmisleading?'}