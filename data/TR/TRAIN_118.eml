{'body': 'Disclaimer:  I\'m partial to XFS\n\nTim Clewlow put forth on 5/1/2010 2:44 AM:\n\n> My reticence to use ext4 / xfs has been due to long cache before\n> write times being claimed as dangerous in the event of kernel lockup\n> / power outage. \n\nThis is a problem with the Linux buffer cache implementation, not any one\nfilesystem.  The problem isn\'t the code itself, but the fact it is a trade\noff between performance and data integrity.  No journaling filesystem will\nprevent the loss of data in the Linux buffer cache when the machine crashes.\n What they will do is zero out or delete any files that were not fully\nwritten before the crash in order to keep the FS in a consistent state.  You\nwill always lose data that\'s in flight, but your FS won\'t get corrupted due\nto the journal replay after reboot.  If you are seriously concerned about\nloss of write data that is in the buffer cache when the system crashes, you\nshould mount your filesystems with "-o sync" in the fstab options so all\nwrites get flushed to disk without being queued in the buffer cache.\n\n> There are also reports (albeit perhaps somewhat\n> dated) that ext4/xfs still have a few small but important bugs to be\n> ironed out - I\'d be very happy to hear if people have experience\n> demonstrating this is no longer true. My preference would be ext4\n> instead of xfs as I believe (just my opinion) this is most likely to\n> become the successor to ext3 in the future.\n\nI can\'t speak well to EXT4, but XFS has been fully production quality for\nmany years, since 1993 on Irix when it was introduced, and since ~2001 on\nLinux.  There was a bug identified that resulted in fs inconsistency after a\ncrash which was fixed in 2007.  All bug fix work since has dealt with minor\nissues unrelated to data integrity.  Most of the code fix work for quite\nsome time now has been cleanup work, optimizations, and writing better\ndocumentation.  Reading the posts to the XFS mailing list is very\ninformative as to the quality and performance of the code.  XFS has some\nreally sharp devs.  Most are current or former SGI engineers.\n\n> I have been wanting to know if ext3 can handle >16TB fs.  I now know\n> that delayed allocation / writes can be turned off in ext4 (among\n> other tuning options I\'m looking at), and with ext4, fs sizes are no\n> longer a question. So I\'m really hoping that ext4 is the way I can\n> go.\n\nXFS has even more tuning options than EXT4--pretty much every FS for that\nmatter.  With XFS on a 32 bit kernel the max FS and file size is 16TB.  On a\n64 bit kernel it is 9 exabytes each.  XFS is a better solution than EXT4 at\nthis point.  Ted T\'so admits last week that one function call in EXT4 is in\nterrible shape and will a lot of work to fix:\n\n"On my todo list is to fix ext4 to not call write_cache_pages() at all.\nWe are seriously abusing that function ATM, since we\'re not actually\nwriting the pages when we call write_cache_pages().  I won\'t go into\nwhat we\'re doing, because it\'s too embarassing, but suffice it to say\nthat we end up calling pagevec_lookup() or pagevec_lookup_tag()\n*four*, count them *four* times while trying to do writeback.\n\nI have a simple patch that gives ext4 our own copy of\nwrite_cache_pages(), and then simplifies it a lot, and fixes a bunch\nof problems, but then I discarded it in favor of fundamentally redoing\nhow we do writeback at all, but it\'s going to take a while to get\nthings completely right.  But I am working to try to fix this."\n\n> I\'m also hoping that a cpu/motherboard with suitable grunt and fsb\n> bandwidth could reduce performance problems with software raid6. If\n> I\'m seriously mistaken then I\'d love to know beforehand. My\n> reticence to use hw raid is that it seems like adding one more point\n> of possible failure, but I could be easily be paranoid in dismissing\n> it for that reason.\n\nGood hardware RAID cards are really nice and give you some features you\ncan\'t really get with md raid such as true "just yank the drive tray out"\nhot swap capability.  I\'ve not tried it, but I\'ve read that md raid doesn\'t\nlike it when you just yank an active drive.  Fault LED drive, audible\nwarnings, are also nice with HW RAID solutions.  The other main advantage is\nperformance.  Decent HW RAID is almost always faster than md raid, sometimes\nby a factor of 5 or more depending on the disk count and RAID level.\nTypically good HW RAID really trounces md raid performance at levels such as\n5, 6, 50, 60, basically anything requiring parity calculations.\n\nSounds like you\'re more of a casual user who needs lots of protected disk\nspace but not necessarily absolute blazing speed.  Linux RAID should be fine.\n\nTake a closer look at XFS before making your decision on a FS for this\narray.  It\'s got a whole lot to like, and it has features to exactly tune\nXFS to your mdadm RAID setup.  In fact it\'s usually automatically done for\nyou as mkfs.xfs queries the block device device driver for stride and width\ninfo, then matches it.  (~$ man 8 mkfs.xfs)\n\nhttp://oss.sgi.com/projects/xfs/\nhttp://www.xfs.org/index.php/XFS_FAQ\nhttp://www.debian-administration.org/articles/388\nhttp://www.jejik.com/articles/2008/04/benchmarking_linux_filesystems_on_software_raid_1/\nhttp://www.osnews.com/story/69\n(note the date, and note the praise Hans Reiser lavishes upon XFS)\nhttp://everything2.com/index.pl?node_id=1479435\nhttp://erikugel.wordpress.com/2010/04/11/setting-up-linux-with-raid-faster-slackware-with-mdadm-and-xfs/\nhttp://btrfs.boxacle.net/repository/raid/2010-04-14_2004/2.6.34-rc3/2.6.34-rc3.html\n(2.6.34-rc3 benchmarks, all filesystems in tree)\n\nXFS Users:\n\n The Linux Kernel Archives\n\n"A bit more than a year ago (as of October 2008) kernel.org, in an ever\nincreasing need to squeeze more performance out of it\'s machines, made the\nleap of migrating the primary mirror machines (mirrors.kernel.org) to XFS.\nWe site a number of reasons including fscking 5.5T of disk is long and\npainful, we were hitting various cache issues, and we were seeking better\nperformance out of our file system."\n\n"After initial tests looked positive we made the jump, and have been quite\nhappy with the results. With an instant increase in performance and\nthroughput, as well as the worst xfs_check we\'ve ever seen taking 10\nminutes, we were quite happy. Subsequently we\'ve moved all primary mirroring\nfile-systems to XFS, including www.kernel.org , and mirrors.kernel.org. With\nan average constant movement of about 400mbps around the world, and with\npeaks into the 3.1gbps range serving thousands of users simultaneously it\'s\nbeen a file system that has taken the brunt we can throw at it and held up\nspectacularly."\n\n-- \nStan\n\n\n-- \nTo UNSUBSCRIBE, email to debian-user-REQUEST@lists.debian.org \nwith a subject of "unsubscribe". Trouble? Contact listmaster@lists.debian.org\nArchive: http://lists.debian.org/4BDD5B56.8060705@hardwarefreak.com\n\n\n', 'subject': 'Re: Questions about RAID 6'}