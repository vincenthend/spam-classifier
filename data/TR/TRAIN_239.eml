{'body': 'The email thread below is from fall of 2006.\nI don\'t supposed anyone has any new comments to add to this question?\n\niremoted is still popular ( http://danbri.org/words/2009/10/18/478 ).   \nAnd the license looks friendly.\n\nAlso I noticed this:\nhttp://www.martinkahr.com/2007/07/26/remote-control-wrapper-20/index.html\n\nDoes anyone have any first hand experience with these or other  \npossibilities?\n\nRegards,\n  - Jeremy\n\nGreg Guerin wrote:\n\n> Joshua Smith wrote:\n>\n> >I would like the allow Mac users to control my full-screen Java/JOGL\n> >application using the new Apple Remote thingy.\n>\n> For personal use only, you could use Amit Singh\'s iremoted:\n>   <http://www.osxbook.com/software/iremoted/>\n>\n> It emits a line on stdout for every Apple Remote command received.   \n> Spawn\n> it in a child Process with exec(), then read the InputStream and  \n> parse the\n> text.\n>\n> The executable for iremoted can\'t be redistributed, hence the "for  \n> personal\n> use only" caveat above.  However, you might be able to negotiate  \n> something\n> with its author.\n>\n> In any case, exec()\'ing a child Process and parsing its InputStream  \n> seems\n> like an ideal way to add Apple-Remote features to a Java app,  \n> because the\n> child Process doesn\'t need to depend on or be constrained by the JVM.\n>\n> Maybe there\'s a version of Martin Kahr\'s code that already does  \n> something\n> daemon-like.  If not, it would probably be a fairly straightforward  \n> ObjC\n> tool to write.  Much simpler than trying to get it to work under  \n> JNI, I\n> suspect.\n>\n>   -- GG\n\n _______________________________________________\nDo not post admin requests to the list. They will be ignored.\nJava-dev mailing list      (Java-dev@lists.apple.com)\nHelp/Unsubscribe/Update your Subscription:\nhttp://lists.apple.com/mailman/options/java-dev/mlsubscriber.tech%40csmining.org\n\nThis email sent to mlsubscriber.tech@csmining.org\n\n', 'subject': 'Re: Supporting Apple Remote from a Java app?'}