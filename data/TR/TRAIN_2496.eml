{'body': 'Dear Anand, \n\nI tried your configuration file, but nothing changed.\n\nFor all of you who were so kind to try to help me, here are some good\nnews: I tried to install kernel 2.6.32 from lenny backports and the\nsound seems to work now. At least I could here the "login.wav" that most\nLenny users know.\n\nThe bad part is that now I cannot make the graphics card to work,\nbecause I should recompile the NVidia driver, but to accomplish this\ntask I need linux-headers-$(uname -r), and this package depend on  the\ncorresponding linux-kbuild, which won\'t install, according to apt-get\nmessage.\n\nThis is a pity, but at least now I\'m sure the sound card is working. My\nPC is brand new, so I\'m happy it\'s not a hardware problem, even though\nit\'s still a problem.\n\nSo I would say the issue is solved, from my point of view. I won\'t ask\nsome help to force the installation of linux-headers in this thread,\nmaybe I\'ll start another one.\n\nMany many thanks to everyone!\n\nOn Sun, 2010-05-02 at 09:26 +0530, Anand Sivaram wrote:\n> On Sat, May 1, 2010 at 22:49, Andrea Giuliano <sarkiaponius@alice.it> wrote:\n> > Here is /usr/share/alsa/alsa.conf (that\'s a lot of lines!)\n> >\n> > Best regards.\n> >\n> > #\n> > #  ALSA library configuration file\n> > #\n> >\n> > # pre-load the configuration files\n> >\n> > @hooks [\n> >        {\n> >                func load\n> >                files [\n> >                        "/etc/asound.conf"\n> >                        "~/.asoundrc"\n> >                ]\n> >                errors false\n> >        }\n> > ]\n> >\n> > # load card-specific configuration files (on request)\n> >\n> > cards.@hooks [\n> >        {\n> >                func load\n> >                files [\n> >                        {\n> >                                @func concat\n> >                                strings [\n> >                                        { @func datadir }\n> >                                        "/cards/aliases.conf"\n> >                                ]\n> >                        }\n> >                ]\n> >        }\n> >        {\n> >                func load_for_all_cards\n> >                files [\n> >                        {\n> >                                @func concat\n> >                                strings [\n> >                                        { @func datadir }\n> >                                        "/cards/"\n> >                                        { @func private_string }\n> >                                        ".conf"\n> >                                ]\n> >                        }\n> >                ]\n> >                errors false\n> >        }\n> > ]\n> >\n> > #\n> > # defaults\n> > #\n> >\n> > # show all name hints also for definitions without hint {} section\n> > defaults.namehint.showall off\n> > # show just basic name hints\n> > defaults.namehint.basic on\n> > # show extended name hints\n> > defaults.namehint.extended off\n> > #\n> > defaults.ctl.card 0\n> > defaults.pcm.card 0\n> > defaults.pcm.device 0\n> > defaults.pcm.subdevice -1\n> > defaults.pcm.nonblock 1\n> > defaults.pcm.ipc_key 5678293\n> > defaults.pcm.ipc_gid audio\n> > defaults.pcm.ipc_perm 0660\n> > defaults.pcm.dmix.max_periods 0\n> > defaults.pcm.dmix.rate 48000\n> > defaults.pcm.dmix.format "unchanged"\n> > defaults.pcm.dmix.card defaults.pcm.card\n> > defaults.pcm.dmix.device defaults.pcm.device\n> > defaults.pcm.dsnoop.card defaults.pcm.card\n> > defaults.pcm.dsnoop.device defaults.pcm.device\n> > defaults.pcm.front.card defaults.pcm.card\n> > defaults.pcm.front.device defaults.pcm.device\n> > defaults.pcm.rear.card defaults.pcm.card\n> > defaults.pcm.rear.device defaults.pcm.device\n> > defaults.pcm.center_lfe.card defaults.pcm.card\n> > defaults.pcm.center_lfe.device defaults.pcm.device\n> > defaults.pcm.side.card defaults.pcm.card\n> > defaults.pcm.side.device defaults.pcm.device\n> > defaults.pcm.surround40.card defaults.pcm.card\n> > defaults.pcm.surround40.device defaults.pcm.device\n> > defaults.pcm.surround41.card defaults.pcm.card\n> > defaults.pcm.surround41.device defaults.pcm.device\n> > defaults.pcm.surround50.card defaults.pcm.card\n> > defaults.pcm.surround50.device defaults.pcm.device\n> > defaults.pcm.surround51.card defaults.pcm.card\n> > defaults.pcm.surround51.device defaults.pcm.device\n> > defaults.pcm.surround71.card defaults.pcm.card\n> > defaults.pcm.surround71.device defaults.pcm.device\n> > defaults.pcm.iec958.card defaults.pcm.card\n> > defaults.pcm.iec958.device defaults.pcm.device\n> > defaults.pcm.modem.card defaults.pcm.card\n> > defaults.pcm.modem.device defaults.pcm.device\n> > defaults.rawmidi.card 0\n> > defaults.rawmidi.device 0\n> > defaults.rawmidi.subdevice -1\n> > defaults.hwdep.card 0\n> > defaults.hwdep.device 0\n> > defaults.timer.class 2\n> > defaults.timer.sclass 0\n> > defaults.timer.card 0\n> > defaults.timer.device 0\n> > defaults.timer.subdevice 0\n> >\n> > #\n> > #  PCM interface\n> > #\n> >\n> > # redirect to load-on-demand extended pcm definitions\n> > pcm.cards cards.pcm\n> >\n> > pcm.default cards.pcm.default\n> > pcm.front cards.pcm.front\n> > pcm.rear cards.pcm.rear\n> > pcm.center_lfe cards.pcm.center_lfe\n> > pcm.side cards.pcm.side\n> > pcm.surround40 cards.pcm.surround40\n> > pcm.surround41 cards.pcm.surround41\n> > pcm.surround50 cards.pcm.surround50\n> > pcm.surround51 cards.pcm.surround51\n> > pcm.surround71 cards.pcm.surround71\n> > pcm.iec958 cards.pcm.iec958\n> > pcm.spdif iec958\n> > pcm.dmix cards.pcm.dmix\n> > pcm.dsnoop cards.pcm.dsnoop\n> > pcm.modem cards.pcm.modem\n> > pcm.phoneline cards.pcm.phoneline\n> >\n> > pcm.hw {\n> >        @args [ CARD DEV SUBDEV ]\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func getenv\n> >                        vars [\n> >                                ALSA_PCM_CARD\n> >                                ALSA_CARD\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.pcm.card\n> >                        }\n> >                }\n> >        }\n> >        @args.DEV {\n> >                type integer\n> >                default {\n> >                        @func igetenv\n> >                        vars [\n> >                                ALSA_PCM_DEVICE\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.pcm.device\n> >                        }\n> >                }\n> >        }\n> >        @args.SUBDEV {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.pcm.subdevice\n> >                }\n> >        }\n> >        type hw\n> >        card $CARD\n> >        device $DEV\n> >        subdevice $SUBDEV\n> >        hint {\n> >                show {\n> >                        @func refer\n> >                        name defaults.namehint.extended\n> >                }\n> >                description "Direct hardware device without any conversions"\n> >        }\n> > }\n> >\n> > pcm.plughw {\n> >        @args [ CARD DEV SUBDEV ]\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func getenv\n> >                        vars [\n> >                                ALSA_PCM_CARD\n> >                                ALSA_CARD\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.pcm.card\n> >                        }\n> >                }\n> >        }\n> >        @args.DEV {\n> >                type integer\n> >                default {\n> >                        @func igetenv\n> >                        vars [\n> >                                ALSA_PCM_DEVICE\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.pcm.device\n> >                        }\n> >                }\n> >        }\n> >        @args.SUBDEV {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.pcm.subdevice\n> >                }\n> >        }\n> >        type plug\n> >        slave.pcm {\n> >                type hw\n> >                card $CARD\n> >                device $DEV\n> >                subdevice $SUBDEV\n> >        }\n> >        hint {\n> >                show {\n> >                        @func refer\n> >                        name defaults.namehint.extended\n> >                }\n> >                description "Hardware device with all software conversions"\n> >        }\n> > }\n> >\n> > pcm.plug {\n> >        @args [ SLAVE ]\n> >        @args.SLAVE {\n> >                type string\n> >        }\n> >        type plug\n> >        slave.pcm $SLAVE\n> > }\n> >\n> > pcm.shm {\n> >        @args [ SOCKET PCM ]\n> >        @args.SOCKET {\n> >                type string\n> >        }\n> >        @args.PCM {\n> >                type string\n> >        }\n> >        type shm\n> >        server $SOCKET\n> >        pcm $PCM\n> > }\n> >\n> > pcm.tee {\n> >        @args [ SLAVE FILE FORMAT ]\n> >        @args.SLAVE {\n> >                type string\n> >        }\n> >        @args.FILE {\n> >                type string\n> >        }\n> >        @args.FORMAT {\n> >                type string\n> >                default raw\n> >        }\n> >        type file\n> >        slave.pcm $SLAVE\n> >        file $FILE\n> >        format $FORMAT\n> > }\n> >\n> > pcm.file {\n> >        @args [ FILE FORMAT ]\n> >        @args.FILE {\n> >                type string\n> >        }\n> >        @args.FORMAT {\n> >                type string\n> >                default raw\n> >        }\n> >        type file\n> >        slave.pcm null\n> >        file $FILE\n> >        format $FORMAT\n> > }\n> >\n> > pcm.null {\n> >        type null\n> >        hint {\n> >                show {\n> >                        @func refer\n> >                        name defaults.namehint.basic\n> >                }\n> >                description "Discard all samples (playback) or generate zero samples\n> > (capture)"\n> >        }\n> > }\n> >\n> > #\n> > #  Control interface\n> > #\n> >\n> > ctl.default {\n> >        type hw\n> >        card {\n> >                @func getenv\n> >                vars [\n> >                        ALSA_CTL_CARD\n> >                        ALSA_CARD\n> >                ]\n> >                default {\n> >                        @func refer\n> >                        name defaults.ctl.card\n> >                }\n> >        }\n> > }\n> >\n> > ctl.hw {\n> >        @args [ CARD ]\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func getenv\n> >                        vars [\n> >                                ALSA_CTL_CARD\n> >                                ALSA_CARD\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.ctl.card\n> >                        }\n> >                }\n> >        }\n> >        type hw\n> >        card $CARD\n> > }\n> >\n> > ctl.shm {\n> >        @args [ SOCKET CTL ]\n> >        @args.SOCKET {\n> >                type string\n> >        }\n> >        @args.CTL {\n> >                type string\n> >        }\n> >        type shm\n> >        server $SOCKET\n> >        ctl $CTL\n> > }\n> >\n> > #\n> > #  RawMidi interface\n> > #\n> >\n> > rawmidi.default {\n> >        type hw\n> >        card {\n> >                @func getenv\n> >                vars [\n> >                        ALSA_RAWMIDI_CARD\n> >                        ALSA_CARD\n> >                ]\n> >                default {\n> >                        @func refer\n> >                        name defaults.rawmidi.card\n> >                }\n> >        }\n> >        device {\n> >                @func igetenv\n> >                vars [\n> >                        ALSA_RAWMIDI_DEVICE\n> >                ]\n> >                default {\n> >                        @func refer\n> >                        name defaults.rawmidi.device\n> >                }\n> >        }\n> > }\n> >\n> > rawmidi.hw {\n> >        @args [ CARD DEV SUBDEV ]\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func getenv\n> >                        vars [\n> >                                ALSA_RAWMIDI_CARD\n> >                                ALSA_CARD\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.rawmidi.card\n> >                        }\n> >                }\n> >        }\n> >        @args.DEV {\n> >                type integer\n> >                default {\n> >                        @func igetenv\n> >                        vars [\n> >                                ALSA_RAWMIDI_DEVICE\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.rawmidi.device\n> >                        }\n> >                }\n> >        }\n> >        @args.SUBDEV {\n> >                type integer\n> >                default -1\n> >        }\n> >        type hw\n> >        card $CARD\n> >        device $DEV\n> >        subdevice $SUBDEV\n> >        hint {\n> >                description "Direct rawmidi driver device"\n> >                device $DEV\n> >        }\n> > }\n> >\n> > rawmidi.virtual {\n> >        @args [ MERGE ]\n> >        @args.MERGE {\n> >                type string\n> >                default 1\n> >        }\n> >        type virtual\n> >        merge $MERGE\n> > }\n> >\n> > #\n> > #  Sequencer interface\n> > #\n> >\n> > seq.default {\n> >        type hw\n> > }\n> >\n> > seq.hw {\n> >        type hw\n> > }\n> >\n> > #\n> > #  HwDep interface\n> > #\n> >\n> > hwdep.default {\n> >        type hw\n> >        card {\n> >                @func getenv\n> >                vars [\n> >                        ALSA_HWDEP_CARD\n> >                        ALSA_CARD\n> >                ]\n> >                default {\n> >                        @func refer\n> >                        name defaults.hwdep.card\n> >                }\n> >        }\n> >        device {\n> >                @func igetenv\n> >                vars [\n> >                        ALSA_HWDEP_DEVICE\n> >                ]\n> >                default {\n> >                        @func refer\n> >                        name defaults.hwdep.device\n> >                }\n> >        }\n> > }\n> >\n> > hwdep.hw {\n> >        @args [ CARD DEV ]\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func getenv\n> >                        vars [\n> >                                ALSA_HWDEP_CARD\n> >                                ALSA_CARD\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.hwdep.card\n> >                        }\n> >                }\n> >        }\n> >        @args.DEV {\n> >                type integer\n> >                default {\n> >                        @func igetenv\n> >                        vars [\n> >                                ALSA_HWDEP_DEVICE\n> >                        ]\n> >                        default {\n> >                                @func refer\n> >                                name defaults.hwdep.device\n> >                        }\n> >                }\n> >        }\n> >        type hw\n> >        card $CARD\n> >        device $DEV\n> > }\n> >\n> > #\n> > #  Timer interface\n> > #\n> >\n> > timer_query.default {\n> >        type hw\n> > }\n> >\n> > timer_query.hw {\n> >        type hw\n> > }\n> >\n> > timer.default {\n> >        type hw\n> >        class {\n> >                @func refer\n> >                name defaults.timer.class\n> >        }\n> >        sclass {\n> >                @func refer\n> >                name defaults.timer.sclass\n> >        }\n> >        card {\n> >                @func refer\n> >                name defaults.timer.card\n> >        }\n> >        device {\n> >                @func refer\n> >                name defaults.timer.device\n> >        }\n> >        subdevice {\n> >                @func refer\n> >                name defaults.timer.subdevice\n> >        }\n> >        hint.description "Default direct hardware timer device"\n> > }\n> >\n> > timer.hw {\n> >        @args [ CLASS SCLASS CARD DEV SUBDEV ]\n> >        @args.CLASS {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.timer.class\n> >                }\n> >        }\n> >        @args.SCLASS {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.timer.sclass\n> >                }\n> >        }\n> >        @args.CARD {\n> >                type string\n> >                default {\n> >                        @func refer\n> >                        name defaults.timer.card\n> >                }\n> >        }\n> >        @args.DEV {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.timer.device\n> >                }\n> >        }\n> >        @args.SUBDEV {\n> >                type integer\n> >                default {\n> >                        @func refer\n> >                        name defaults.timer.subdevice\n> >                }\n> >        }\n> >        type hw\n> >        class $CLASS\n> >        sclass $SCLASS\n> >        card $CARD\n> >        device $DEV\n> >        subdevice $SUBDEV\n> > }\n> >\n> >\n> > On Sat, 2010-05-01 at 21:40 +0530, Anand Sivaram wrote:\n> >> On Sat, May 1, 2010 at 20:55, Andrea Giuliano <sarkiaponius@alice.it> wrote:\n> >> > Here aplay -l:\n> >> >\n> >> > card 0: NVidia [HDA NVidia], device 0: HDA Generic [HDA Generic]\n> >> >  Subdevices: 1/1\n> >> >  Subdevice #0: subdevice #0\n> >> >\n> >> > Here is amixer info, too:\n> >> >\n> >> > Card default \'NVidia\'/\'HDA NVidia at 0xf9ef8000 irq 22\'\n> >> >  Mixer name    : \'VIA ID 397\'\n> >> >  Components    : \'HDA:11060397\'\n> >> >  Controls      : 4\n> >> >  Simple ctrls  : 3\n> >> >\n> >> > Actually, you are right, it\'s rather strange I see just a few controls,\n> >> > they should be many more (my card is a 7.1 points one).\n> >> >\n> >> > On Sat, 2010-05-01 at 14:08 +0000, Camaleón wrote:\n> >> >> On Sat, 01 May 2010 15:52:46 +0200, Andrea Giuliano wrote:\n> >> >>\n> >> >> > Alsamixer doesn\'i show muted input. Not does gnome-volume-settings. I\n> >> >> > also checked out gnome-sound-properties, and it gives no errors at all,\n> >> >> > as if it thinks everything is working fine.\n> >> >> >\n> >> >> > Here is the output from amixer:\n> >> >>\n> >> >> Only "master", "PCM" and "capture"?\n> >> >>\n> >> >> No "mic" and no additional "aux" or "surround" outputs? :-?\n> >> >>\n> >> >> > and here is /proc/asound/cards\n> >> >> >\n> >> >> >  0 [NVidia         ]: HDA-Intel - HDA NVidia\n> >> >> >                       HDA NVidia at 0xf9ef8000 irq 22\n> >> >> >\n> >> >> > I\'m going to try a LiveCD or such, but I\'m not very optimistic.\n> >> >>\n> >> >> Modern motherboards use to include 5.1 or 7.1 audio channel chipset, it\'s\n> >> >> a bit weird your amixer output only shows 3 devices...\n> >> >>\n> >> >> This may sound silly, but have you tried to plug the speakers jack in all\n> >> >> the outlets available?\n> >> >>\n> >> >> What does "aplay -l" say?\n> >> >>\n> >> >> Greetings,\n> >> >>\n> >> >> --\n> >> >> Camaleón\n> >> >>\n> >> >>\n> >> >\n> >> >\n> >> > --\n> >> > To UNSUBSCRIBE, email to debian-user-REQUEST@lists.debian.org\n> >> > with a subject of "unsubscribe". Trouble? Contact listmaster@lists.debian.org\n> >> > Archive: http://lists.debian.org/1272727535.20670.1.camel@debian\n> >> >\n> >> >\n> >>\n> >> What is the output of /usr/share/alsa/alsa.conf\n> >>\n> >>\n> >\n> \n> This is the working alsa.conf of my athlon mcp61 machine.\n> Could you try the following.\n> cd /usr/share/alsa\n> mv alsa.conf alsa.conf.original (_do_ _not_ delete it, just move it so\n> that you could copy  it back in case required)\n> gunzip /path/to/download/alsa.conf.gz\n> mv /path/to/download/alsa.conf ./\n> restart machine.\n\n\n-- \nTo UNSUBSCRIBE, email to debian-user-REQUEST@lists.debian.org \nwith a subject of "unsubscribe". Trouble? Contact listmaster@lists.debian.org\nArchive: http://lists.debian.org/1272811347.3525.8.camel@debian\n\n\n', 'subject': '[SOLVED] Re: NVidia MCP61, no sound...'}