{'body': 'There is a software package that is used (or was up through w2k) \non MicroSloth for this purpose. Ghost, or some such. One essentially \n"takes a picture" of the machine\'s proper config, and then upon \nschedule or demand replaces the machine\'s current config with the \nproper picture. It essentially over-writes the entire disk drive. \nEspecially good for student access machines at libraries, etc.\n\nBen Mord wrote:\n> \n>   -----Original Message-----\n>   From: Crispin Cowan [mailto:crispin@wirex.com]\n>   Sent: Wednesday, September 04, 2002 5:46 PM\n>   To: Ben Mord\n>   Cc: Webappsec Securityfocus.Com; SECPROG Securityfocus\n>   Subject: Re: use of base image / delta image for automated recovery from\n>  attacks\n> \n> >  I did my dissertation work in this area (Optimistic Computing) and so was\n> >interested in applying it to the security problem. Unfortunately, you hit a\n> >bunch of problems:\n> \n> >    a.. When can you "commit" a state as being "good"?  You can\'t run from\n> a\n> >redo log forever; the performance and storage penalties accumulate. Even\n> log\n> >structured file systems garbage collect eventually. So you have to commit\n> >sometime. The problem is that if you commit too eagerly, you might commit\n> >corrupted state. If you commit too conservatively, you eat performance and\n> >storage penalties.\n> >    b.. What do you do if you discover that there is corrupted state in the\n> >*middle* of your redo log, and you want some of the critical state that\n> >comes after it? You need some way to dig the corruption out of the middle\n> >and save the rest. My dissertation solves this problem, but you have to\n> >re-write everything in my programming language :)\n> .    c.. Just doing this at all imposes substantial performance penalties. I\n> >love VMWare, and use it every day (the best $200 I ever spent on software)\n> >.but it is not very fast.\n> \n> My proposed solution to the first two problems you mention is to be less\n> ambitious. The idea is that you *never* commit - instead, you simply revert\n> to base state on reboot. Obviously, you can\'t do this with partitions that\n> accrue important state, e.g. a partition that stores database table data.\n> But in your typical web application, most partitions do not accrue important\n> state. For example, your typical web server or application server could have\n> their entire state reset back to a known base state during each reboot\n> without harm.\n> The advantage of being less ambitious is that we have a quick and easy way\n> to frustrate certain attacks without rewriting all of our software or\n> spending lots of money on additional application-specific coding.\n> \n> The first two problems you describe only occur if we become more ambitious\n> and try to apply these same techniques to, for example, the database table\n> partitions, where state changes remain important across reboots. That would\n> certainly be a nice touch! But as you point out, many problems would have to\n> be addressed first, and the hardest of these can not be abstracted away from\n> the particular application. Not the least of these is the problem of writing\n> heuristics for delineating good from malevolent state. That task is roughly\n> analogous to what antiviral software authors do for a living, only this work\n> could not be shared across many different systems as it would be specific to\n> a paritcular application.\n> \n> The third problem you mention - performance penalty - is an argument for\n> doing this in hardware, much like hardware raid. Another argument for doing\n> this in hardware is hack resistance. Changing the base instance should\n> require physical access to the console, e.g. by requiring that you first\n> flip a physical switch on your RAID hardware or modify a bios setting. If\n> the base image can be modified remotely or by software, then you have to\n> worry about whether an implementation flaw might permit a cracker to modify\n> the base image remotely.\n> \n> Ben\n\n-- \n    (                                                ______\n    ))   .-- Scott MacKenzie; Dine\' College ISD --.   >===<--.\n  C|~~| (>---  Phone/Voice Mail:  928-724-6639 ---<) | ; o |-\'\n   |  |  \\---  Senior DBA/CARS Coordinator/Etc. --/  |  _  |\n   `--\'   `- Email: scottm@crystal.ncc.cc.nm.us -\'   `-----\'\n\n\n', 'subject': 'Re: FW: use of base image / delta image for automated recovery\n    from attacks'}