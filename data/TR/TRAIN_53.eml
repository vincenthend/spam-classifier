{'body': "Hi All,\n\nI have a question which is a bit tricky and was\nwondering of anyone has come across this problem\nbefore or could point me in the right direction.\n\nI am involved in porting a SCO unix application to\nLinux, and we have encountered a problem with the way\nsemaphores  are being handled. The application uses\nmulitple processes to run application code with the\nmain process known as the bsh which controls all i/o\nbe it screen, or file i/o, syncronisation is handled\nvia semaphores.\n\nIn certain circumstances the main process and the\napplication child process seem to lock up both waiting\nfor the syncronisation semaphores to change state, I\nhave attached ddd to the processes and it seems that\nthe semaphore code is doing the correct things for\nsyncronisation but the processes stay stuck in the\nsemop() system call.\n\nI have also noticed that if I introduce a slight delay\nbetween changing semaphore states the problem goes\naway, but this causes our entire application to run\nreally sloooww !! lol\n\nIs there anything weird or different with the standard\nimplemenation of semaphores on modern linux that could\ncause a semop() to fail to pick up the change in state\n\nin a semaphore immediately?\n\nSetting sem_flg = IPC_NOWAIT and checking for errno ==\nEAGAIN and recalling semop() if the semop() call fails\n(-1) also fixes the problem but again system\nperformance goes down the toilet.\n\nboth the parent controlling process run as the same\nuid, and the parent creates the semaphores with\npermissions 0666.\n\nAny pointers would be appreciated!\n\nRgds,\n\nColin Nevin \n\n__________________________________________________\nDo You Yahoo!?\nEverything you'll ever need on one web page\nfrom News and Sport to Email and Music Charts\nhttp://uk.my.yahoo.com\n\n-- \nIrish Linux Users' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n\n", 'subject': '[ILUG] semaphores on linux RH7.3'}