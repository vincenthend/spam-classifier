{'body': 'From nobody Fri Sep  7 01:05:24 2018\nContent-Type: Text/Plain;\r\n  charset="iso-8859-15"\nContent-Transfer-Encoding: quoted-printable\n\nOn Thursday 29 April 2010 14:17:28 Joe Brenner wrote:\r\n> Ron Johnson <ron.l.johnson@cox.net> wrote:\r\n> > B. Alexander wrote:\r\n> > > Ron Johnson<ron.l.johnson@cox.net>  wrote:\r\n> > >> XFS is the canonical fs for when you have lots of Big Files.  I\'ve\r\n> > >> also seen simple benchmarks on this list showing that it\'s faster\r\n> > >> than ext3/ext4.\r\n> > >\r\n> > > Thats cool. What about Lots of Little Files? That was another of the\r\n> > > draws of reiser3.\r\n> >\r\n> > That same unofficial benchmark showed surprising small-file speed by\r\n> > xfs.\r\n>=20\r\n> Would you happen to have any links to such benchmarks, unofficial or\r\n> otherwise?\r\n>=20\r\n> My experience has been that whenever I look at filesystem benchmarks,\r\n> they skip the many-small-files case.  I\'ve always had the feeling that\r\n> most of the big filesystems cared a lot about scaling up in file-size,\r\n> but not too much about anything else.\r\n\r\nNB: This is my best recollection; I\'m not looking this up right now.  Pleas=\r\ne=20\r\ncheck my facts, I\'d love to know if I\'m wrong.\r\n\r\nSome of that reiserfs performance came from directories-as-hash-tables, whi=\r\nch=20\r\nI believe ext3/4 supports and is native for btrfs.  Some of that also came=\r\n=20\r\nfrom tail-packing, which could come from the extents feature of ext4 and=20\r\nshould be in btrfs.  The final edge reiserfs had was above-average=20\r\nflushing/caching algorithms, and the development pushes in ext4 and btrfs h=\r\nave=20\r\nlikely reduced or eliminated that; I think the unified block-device caching=\r\n=20\r\nsystem in the kernel able helped make that not such a big deal.\r\n\r\n> I\'m a Reiser3 user myself, and I\'ve never had any problems with it.\r\n>=20\r\n> (The trouble with it being "long in the tooth" is mostly hypothetical,\r\n> isn\'t it?)\r\n\r\nNot really.  Reiserfs will probably be maintained in the kernel for a very=\r\n=20\r\nlong time, in that as any interfaces it uses are updated it will be updated=\r\n to=20\r\nuse the new interface.  However, ISTR there are open bugs on reiserfs that=\r\n=20\r\nwill not be fixed.  Similarly, I expect new bugs that can be blamed on the=\r\n=20\r\nreiserfs code are less likely to be fixed than bugs than can be blamed on t=\r\nhe=20\r\next2/3/4 or xfs code.\r\n\r\nIn addition, as file system technology advances, reiserfs will become less=\r\n=20\r\nattractive for new installs and it will become more attractive to migrate a=\r\nway=20\r\nfrom it.  Unfortunately, migration tools are unlikely to be developed, outs=\r\nide=20\r\nof generic file system migration tools.  Compare with btrfs_convert which=20\r\nallows an ext2/3 file system to be converted to btrfs with no data copying;=\r\n=20\r\nsuch tools have to be aware of the internal structure of the file system an=\r\nd=20\r\nfewer and fewer developers will even HAVE that knowledge of reiserfs.  The=\r\n=20\r\nsource will be available, sure, but even kernel maintainers interested in f=\r\nile=20\r\nsystems are not interested in reiserfs.\r\n\r\nThere\'s no drop-dead date for reiserfs in the kernel (AFAIK), so there\'s no=\r\n=20\r\npressing need to migrate away from it, but there is a lot of work on file=20\r\nsystems that should both perform better and be supported better than reiser=\r\nfs.\r\n=2D-=20\r\nBoyd Stephen Smith Jr.           \t ,=3D ,-_-. =3D.\r\nbss@iguanasuicide.net            \t((_/)o o(\\_))\r\nICQ: 514984 YM/AIM: DaTwinkDaddy \t `-\'(. .)`-\'\r\nhttp://iguanasuicide.net/        \t     \\_/\r\n', 'subject': 'Re: Filesystem recommendations'}