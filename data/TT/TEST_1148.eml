{'body': '\nschemers are often slagged of for that sort of thing \nthey "know the Value of Everything, Cost of Nothing" \ndid i get that the right way arround ?\n\n\n--B\n\n-----Original Message-----\nFrom: John P. Looney [mailto:valen@tuatha.org]\nSent: 08 August 2002 11:38\nTo: ilug@linux.ie\nSubject: Re: [ILUG] slashdot EW Dijkstra humor\n\n\nOn Thu, Aug 08, 2002 at 11:27:59AM +0100, wintermute mentioned:\n> Interesting. I\'ve always wondered about things \'considered\' to be bad. \n> Example the GOTO, most languages support a goto of some sort, so are gotos\nreally bad?\n\n Yes. Especially in the languages he was talking about - C, Pascal and\nAssembler. Goto\'s can be used well; there are a few used in the kernel\ncode to improve efficency. They are almost required in some languages\n(like C) where \'break\' or \'continue\' can\'t be told how many loops/switches\nto break out of.\n\n But, in general, goto\'s make a mess of code.\n\n> Is a loop or a recursive call actually any better than a goto \n> or is the goto used as a kind of common enemy of \n> programming syntax\n> to make sure people use loops or recursion?\n> <<To iterate is human, to recurse divine>>\n\n Recursion is only truely useful if you have an infinite stack. People\nthat think they have an infinite stack shouldn\'t be let near a compiler.\n\n> Kind of makes you wonder about things considered to be \'good\'.  For\n> example people bang on about polymorphism, but is there actually any\n> advantage in using an overloaded function based on class inheritance?\n\n I don\'t care, to be honest.\n\nKate\n\n\n-- \nIrish Linux Users\' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n-- \nIrish Linux Users\' Group: ilug@linux.ie\nhttp://www.linux.ie/mailman/listinfo/ilug for (un)subscription information.\nList maintainer: listmaster@linux.ie\n\n\n', 'subject': 'RE: [ILUG] slashdot EW Dijkstra humor'}