{'body': 'From nobody Fri Sep  7 01:05:29 2018\nContent-type: text/html;Content-Disposition: inline\n\n<map style="color:white; font-size:0.0%; line-height:0.0px">\r\nMembers Only Showroom<br>\r\nThe #1 Way to Buy Direct for Your Home:<br>\r\n\r\nClass2 Class1::func (char* response)\r\n{\r\n         printf( response);\r\n         Class2* d_ = new Class2;\r\n         d_->func (response);\r\n         //print response within Class2->func prints the response\r\n         return d_;\r\n\r\n}\r\n\r\nSnippet of Class2:\r\nClass2 {\r\n//constructor & destructor\r\nvoid func(char*);\r\n\r\n}; \r\ntemplate<class T>\r\nclass base_container\r\n{\r\npublic:\r\n  const T* get() const;\r\n  T* get();\r\n  void insert(T*);\r\n  // etc\r\n\r\n};\r\n\r\ntemplate<class T, class derivedT>\r\nclass base_container_specialized\r\n{\r\npublic:\r\n  typedef base_container<T> this_base;\r\nprivate:\r\n  this_base _base;\r\npublic:\r\n  operator const this_base&() { return _base; }\r\n\r\n  const derivedT* get() const { return static_cast<const\r\nderivedT*>(_base.get()); }\r\n  derivedT* get() { return static_cast<derivedT*>(_base.get()); }\r\n  void insert(derivedT* p) { _base.insert(p); }\r\n  // etc\r\n\r\n};\r\n\r\nclass base{};\r\nclass derived1 : public base {};\r\nclass derived2 : public base {};\r\n\r\nbase_container_specialized is NOT_A base_container. It offers same,\r\nbut type-safe, interface as base_container. It does so through some\r\nsimple casting (from T to derivedT). It also contains base_container,\r\nso that you can get a reference to that if need be (operator const\r\nthis_base&). operator is const, to prevent e.g. calling insert with\r\nbase* or derived2*, as that would be bad, as others have shown. So\r\nthat gives you e.g.\r\n\r\nvoid f0(base_container<base>& c) { c.insert(new base); }\r\nvoid f0const(const base_container<base>&) {}\r\nvoid f1(base_container_specialized<base, derived1>&) {}\r\nvoid f2(base_container_specialized<base, derived2>&) {}\r\n\r\nvoid test()\r\n{\r\n  base_container_specialized<base, derived1> c1;\r\n  c1.insert(new derived1); //ok\r\n  c1.insert(new derived2); //bad\r\n  c1.insert(new base);     //bad, don\'t want base among derived1\r\n  c1.insert(new derived11);//ok\r\n  const base* b = c1.get();//ok, derived1 IS_A base\r\n  const derived1* d1 = c1.get();//ok\r\n  const derived2* d2 = c1.get();//bad, derived1 !IS_A derived2\r\n  f0const(c1);//ok, conversion operator used\r\n  f0(c1);//bad, could insert base among derived1\r\n  f1(c1);//ok, it\'s us\r\n  f2(c1);//bad, f2 wants derived2 container\r\n\r\n} \r\n\r\n</map>\r\n</div>\r\n\r\n<br><br>\r\nDirect.Buy<br>\r\nMembers Only Showroom<br>\r\nThe #1 Way to Buy Direct for Your Home:<br>\r\n@_#megadealsource.com/neqw.html?ne=ykhlg.pzmyhlhnnjlatasykl<br>\r\n<br><br>\r\n_____________________________________________________<br>\r\n<br><br>\r\nUnsubscribe-Here:<br>\r\n@_#megadealsource.com/neqw.html?ne=ykhlh.pzmyhlhnnjlatasykl<br>\r\nor write: DirectBuy IM Network LLC, P.O. Box 1572, Boulder, CO 80306<br>\r\n<br><br>\r\n_____________________________________________________<br>\r\n<br><br>\r\nUnsubscribe_Here:<br>\r\n@_#megadealsource.com/us_ylgiolkpzmyhlhnnjlatasykl_xls/<br>\r\nor write: HS Media, PO Box 105603 #32520 ,Atlanta, GA ,30348-5603<br><br><br>\r\n', 'subject': 'Your visitor passes'}