{'body': "Hi everybody!\n\nI'm writing a web application in java (tomcat + jsp/servlets + database \naccess with postgreSQL).\n\nThis will be released under the GPL and will eventually be useful as a \nframework for other web applications.\n\nThe application main focus is e-commerce, but not limited to that.\n\nI would like to use some form of cryptography to protect data on the \ndatabase, but I have some problem figuring out the right approach.\n\nAbove all, how to store passwords and keys in a shared web server.\n\nA problem that I was unable to solve is how to store keys for \nencryption/decryption. The api that I'm using is the jca (jdk1.4.x), \nand the methods of saving generated keys in keystores fails always. \n\nI can serialize the object, and store in the database, but this is not \nthe most secure approach: this key is needed to decrypt data in the \ndatabase, but the database is accessible from the web application. \nAssuming that I can find a good and secure place where to store the \ndatabase password, I can use a different database with different \nuser... Argh... to complex and doesn't really solve the problem.\n\nWhere I can found good documentation about this topic?\n\nThere is another approach that I would share with the list, something I \nthought that can be of bit interest, but probabily wrong and insecure. \nAfter all, I'm a real beginner in secure programming, and I'm here to \nlearn methods and technics.\n\nFirst of all, I need a secure way to keep database passwords secure, so \nI have to keep them separate from the main server. The right approach \ncould be using a small java bean application that run as normal user \n(not tomcat, so it is not shared with other web services or, worst, the \nnobody user), that has no shell login, but has a default home directory \nor a place where it can hold passwords and keys.\n\nThe web application could then open an ssl connection (could be done in \nthe init method at server startup) to get database passwords. The small \nbean could check via code signature/rmi/whatever else that the source \nis the right one, and handle all the database connections, or give the \ndb connection/password to the main web application.\n\nIn this way, we solve the problem of keeping the keys and passwords in \nshared directories, and also, an attacker should get root/bean user \naccount to read data. This is not perfect, and works only if your \nprovider gives the opportunity to configure a separated java \napplication (that means, really, another server running in the \nbackground).\n\nAny suggestions?\n\nThank you,\nMario Torre\n-- \nPlease avoid sending me Word or PowerPoint attachments.\nSee http://www.fsf.org/philosophy/no-word-attachments.html \n\n", 'subject': 'Encryption approach to secure web applications'}