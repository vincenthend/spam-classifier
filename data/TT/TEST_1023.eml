{'body': 'On Fri, 9 Apr 2010 17:57:04 -0400 (EDT), John Hasler wrote:\r\n> Stephen Powell writes:\r\n>> Yes, Hercules is an IBM mainframe emulator.  But the problem is\r\n>> licensing.  There are some *very old* releases of IBM operating\r\n>> systems that have passed into the public domain that you can run on\r\n>> the Hercules emulator.\r\n>> These are circa 1975 or so, which is about 35 years ago.  An example\r\n>> is VM/SP Release 6.\r\n\r\nOops! I meant to say VM/370 Release 6, not VM/SP Release 6.  VM/SP\r\nRelease 6 is still proprietary.\r\n\r\n-----\r\n\r\nThese are some of the issues that someone writing portable code\r\nfor ASCII vs. EBCDIC implementations needs to worry about.\r\n\r\n(1) Collating sequence.  In ASCII, the collating sequence is numbers\r\n(0-9), followed by uppercase letters (A-Z), followed by lowercase\r\nletters (a-z).  Special characters are mixed throughout.  In EBCDIC,\r\nthe collating sequence is lowercase letters (a-z), followed by\r\nuppercase letters (A-Z), followed by numbers (0-9).  So records\r\nsorted alphabetically sort in a different order.\r\n\r\n(2) Assumptions of continuity.  In ASCII, the codes a-z and A-Z\r\nare contiguous, with no codes in between.  In EBCDIC, there are\r\nsix non-contiguous ranges, a-i, j-r, s-z, A-I, J-R, S-Z.  Most\r\nof the codes in between are non-printable characters, but not\r\nall.  For example, ~ sorts above r and below s, } sorts above I\r\nand below J, and \\ sorts above R and below S.\r\n\r\n(3) Hidden assumptions about control codes.  A program may, for\r\nexample, assume that X\'0A\' is a line feed and hard code it\r\nsomewhere.  In ASCII, that is true.  But in EBCDIC, a line feed\r\nis X\'25\'.\r\n\r\n(4) 7-bit assumptions.  In U.S. standard ASCII, all the printable\r\ncharacters are between the hex values of X\'00\'-X\'7F\'.  Codes\r\nabove X\'7F\' are not standard codes.  Historically, these indicate\r\nthe combination of the "Meta" key with a regular code.  In\r\nEBCDIC, the codes are sprinkled throughout the entire range of\r\nX\'00\' through X\'FF\', with the numeric symbol 9 having the highest\r\ncode of any normal printable character (X\'F9\').\r\n\r\nThis is not an exhaustive list, but it gives you an idea\r\nof what to watch for.  Although the\r\nfollowing table has a few mistakes, this link will give you\r\nan idea of ASCII vs. EBCDIC codes.\r\n\r\n   http://www.natural-innovations.com/computing/asciiebcdic.html\r\n\r\n-- \r\n  .\'\'`.     Stephen Powell    <zlinuxman@wowway.com>\r\n : :\'  :\r\n `. `\'`\r\n   `-\r\n\r\n\r\n-- \r\nTo UNSUBSCRIBE, email to debian-user-REQUEST@lists.debian.org \r\nwith a subject of "unsubscribe". Trouble? Contact listmaster@lists.debian.org\r\nArchive: http://lists.debian.org/8691664.2246941270858506206.JavaMail.root@md01.wow.synacor.com\r\n\r\n\r\n', 'subject': 'Re: non-ASCII environment'}